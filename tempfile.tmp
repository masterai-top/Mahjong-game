%%%--------------------------------------
%%% @Module  : pp_account
%%% @Author  : smyx
%%% @Created : 2013.07.15
%%% @Description:用户账户管理
%%%--------------------------------------
-module(pp_account).
-export([handle/3]).
-include("common.hrl").
-include("record.hrl").
-include("debug.hrl").
%%-include("name.hrl").
-compile(export_all).

-define(MAX_ROLE_PER_ACCOUNT, 1).  %%每个帐号建最大角色数
-define(NAME_LEN_MIN, 1).   %%角色名最短长度
-define(NAME_LEN_MAX, 20).  %%角色名最大长度
-define(VAIL_TIME, 3600).  %% 有效时间一小时

%% API Functions
handle(Cmd, Player, Data) ->
	%%?TRACE("pp_account: Cmd:~p, Player:~p, Data:~p~n", [Cmd, Player, Data]),
	%% 	io:format("~s handle_cmd[~p] \n ",[misc:time_format(now()),[Cmd, Data]]),
	handle_cmd(Cmd, Player, Data).

%%登陆验证
%%TODO: 一帐号多角色
handle_cmd(10000, [], Data) ->
	%% 	io:format("~s handle_cmd_10000[~p] \n ",[misc:time_format(now()),Data]),
	case is_good_pass(Data) of
		true -> 
			%% 			io:format("91 check pass"),
			Ret = true;
		_ ->
			case config:get_strict_md5(server) of
				1 -> Ret = false;
				_ -> Ret = true
			end
	end,
	
	%%以上为MD5校验判断
	case Ret of
		true ->
			[ServerId, Accid, _Accname, _Tstamp,  _Ts, Token, _GateIp, ChannelData] = Data,
			if  %% 根据To肯获取真实的平台类型
				Token =:= "lengj" ->
					[_, _, _, ChannelLabel] = ChannelData,
					AccountType = ChannelLabel;
				true ->
					AccountType = Token
			end,
			%% 测试服，根据Accname查询玩家
			{ok, NewServerId} = check_server_id(ServerId),
			RoleList = lib_account:get_server_role_list(NewServerId, Accid, AccountType),
			if RoleList =/= [] ->
				   [L|_T] = RoleList;
			   true ->
				   L = []
			end,
			R = true;
		_ -> 
			L = [],
			R = false
	end,
	{R,L};

%% 创建角色
handle_cmd(10003, Socket, [Accid, Accname, AccType,ServerId, Career, Sex, Name]) -> 
	{ok, NewServerId} = check_server_id(ServerId),
	RoleList = lib_account:get_server_role_list(NewServerId, Accid, AccType),
	Ip = misc:get_ip(Socket),
	%%RoleList = lib_account:get_role_list_by_accname(Accname),
	%% 	io:format("~s handle_cmd_10003[~p] \n ",[misc:time_format(now()),RoleList]),
	case length(RoleList) >= ?MAX_ROLE_PER_ACCOUNT of   %%检查帐号是否有建帐号
		true ->
			[L | _H] = RoleList,
			[Uid | _Data] = L,
			{ok, BinData} = pt_10:write(10003, [1,Uid]),  %%用户已经创建角色
			lib_send:send_one(Socket, BinData);    
		false ->
			case validate_name(Name) of        %%角色名合法性检测
				{false, Msg} ->
					{ok, BinData} = pt_10:write(10003, [Msg, 0]),
					lib_send:send_one(Socket, BinData);
				true ->
					case check_server_id(ServerId) of
						{ok, NewServerId} ->							
							case lib_account:create_role(Accid, Accname, AccType, Name, NewServerId, Career, Sex,Ip) of
								RoleId when is_integer(RoleId) ->
									%%创建角色成功
									spawn(fun()->db_agent_log:insert_log_player(RoleId, Accid, Accname, AccType, Name, Sex, Career)end),
									{ok, BinData} = pt_10:write(10003, [1, RoleId]),
									lib_send:send_one(Socket, BinData);
								_Other ->
									%%角色创建失败
									{ok, BinData} = pt_10:write(10003, [0, 0]),
									lib_send:send_one(Socket, BinData)
							end;
						_ ->
							%%角色创建失败
							{ok, BinData} = pt_10:write(10003, [9, 0]),
							lib_send:send_one(Socket, BinData)
					end
			end
	end;

%%心跳包
handle_cmd(10006, Socket, _R) ->
	{ok, BinData} = pt_10:write(10006, []),
	lib_send:send_one(Socket, BinData);

handle_cmd(10020, _Socket, [Accid]) ->
	lib_account:getin_createpage(Accid);

handle_cmd(_Cmd, _Socket, _Data) ->
	{error, "handle_account no match"}.

%%通行证验证
%%返回true为通过验证,　返回false为未通过验证
%is_good_pass([_Accid, Accname, Tstamp, Cm, Ts]) ->  
is_good_pass([_ServerId, Accid, Accname, Tstamp, Ts, Tiket, _GateIp, ChannelData]) ->  
	%%     io:format("Accid === ~p~n Tstamp === ~p~n Ts === ~p~n", [Accid, Tstamp, Ts]),
	KeyItem = data_config:get_platform_key(Tiket),
	%% 	 io:format("Ticket === ~p~n KeyItem === ~p~n", [Tiket, KeyItem]),
	case Tiket of
		"91" when KeyItem =/= false ->
			{_, Key} = KeyItem,
			{_, VailUrl} = data_config:get_login_url(Tiket),
			VailRes = check_session_to_server(Tiket, [Key, VailUrl, Ts, Accid]);
		%%         "4399" when KeyItem =/= false -> 暂时屏蔽,默认是4399平台
		"4399tw" ->
			{_, Key} = KeyItem,
			VailRes = check_sign_by_accname(Accname, Tstamp, Key, Ts);
		"ley" when KeyItem =/= false -> %% 乐游
			{_, Key} = KeyItem,
			VailRes = check_sign_vail(Accid, Tstamp, Key, Ts);
		"uc" when KeyItem =/= false ->			
			VailRes = true;
		"lengj" when KeyItem =/= false ->
			VailRes = check_lengj_login(ChannelData, Tiket, Ts);
		_ ->
			{_, Key} = KeyItem,
			VailRes = check_sign_vail(Accid, Tstamp, Key, Ts)
	end,
	%%     io:format("VailRes === ~p~n", [VailRes]),
	case  VailRes of
		true ->
			%% 验证是否超时
			true;
		%% 			is_vail_time(Tstamp);           
		_ ->
			if
				_GateIp =:= "119.145.114.130" ->
					true;
				true ->
					false
			end
%% 			false
	end.

%% 跟服务器通讯验证登陆
check_session_to_server(Tiket, List) ->
	%% 	io:format("Tiket == ~p~n LIst == ~p~n", [Tiket, List]),
	case Tiket of
		"91" ->
			[Key, VailUrl, Session, Uin] = List,
			%% 			io:format("ok, cul list === ~p~n", [[Key, VailUrl, Session, Uin]]),
			AppId = 112458,
			Act = 4,
			Md5 = tool:md5(lists:concat([AppId, Act, Uin, Session, Key])),
			%% 			io:format("Md5 === ~p~n", [Md5]),
			Url = lists:concat([VailUrl, "?AppId=", AppId, "&Act=4&Uin=", Uin, "&Sign=", Md5, "&SessionID=", Session]);
		_ ->
			?ERROR_MSG("pp_account tiket error:~p", [Tiket]),
			Url = []		
	end,
	Json = misc:get_http_content(Url),
	case rfc4627:decode(Json) of
		{ok, RequestObject, _}  ->
			%% 			io:format("RequestObject === ~p~n", [RequestObject]),
			case rfc4627:get_field(RequestObject, "ErrorCode", null) of
				<<"1">> ->
					true;
				Error ->
					?ERROR_MSG("pp_account result error:~p", [Error]),
					false
			end;
		Error ->
			?ERROR_MSG("pp_account result decode error:~p", [Error]),
			false
	end.



%%     case misc:get_http_content(Url) of
%%         Res ->
%%             Res;
%% %%             io:format("~w~n", [Result]);
%% %%             rfc4627:decode_noauto(Result);
%% %%                 {"ErrorCode": Res, _} = Result,
%% %%                 case Res of
%% %%                     1 ->
%% %%                     true;
%% %%                 _ ->
%% %%                     false
%% %%             end;
%% %%         _ ->
%%             false
%%     end.

%% 检查Sign的有效性
check_sign_vail(Accid, Tstamp, Key, Ts) ->
	%% 	io:format("check_sign_vail === ~p~n", [[Accid, Tstamp, Key, Ts]]),
	Md5 = lists:concat([Accid, '&', Tstamp, '&', Key]),
	Hex = util:md5(Md5),
	%% 	io:format("check_sign_vail === ~p~n", [[Ts, Hex]]),
	Hex == Ts.

check_sign_by_accname(Accname, Tstamp, Key, Ts) ->
	%% 	io:format("check_sign_by_accname === ~p~n", [[Accname, Tstamp, Key, Ts]]),
	Md5 = lists:concat([Accname, '&', Tstamp, '&', Key]),
	Hex = util:md5(Md5),
	%% 	io:format("check_sign_by_accname === ~p~n  Md5 === ~p~n", [Ts, Hex]),
	Hex == Ts.

%% 检查sid(Uc平台)
check_uc_sid(UcSid, Tiket) ->
	{_, GameId} = data_config:get_platform_gameid(Tiket),
	{_, ApiKey} = data_config:get_platform_key(Tiket),
	{_, Url} = data_config:get_login_url(Tiket),
	Id = util:unixtime(),
	Sign = util:md5(lists:concat(["sid=", UcSid, ApiKey])),
	%% 	{
	%% 	 "id":1330395827,
	%% 	 "data":{"sid":"abcdefg123456"},
	%% 	 "game":{"gameId":12345},
	%% 	 "sign":"6e9c3c1e7d99293dfc0c81442f9a9984"
	%% 	}
	L = [{"id", Id}, {"data", [{"sid", UcSid}]}, {"game", [{"gameId", GameId}]}, {"sign", Sign}],
	Json = http_util2:convert_json(L),
	Request = {Url, [], "application/json", Json},
	HTTPOptions = [],
	Options = [],
	
	%% 	io:format("~n==httpc:request === ~p~n", [Request]),
	case httpc:request(post, Request, HTTPOptions, Options) of
		{ok, {_Status, _Headers, Raw}} ->
			%% 			io:format("~n==httpc:request === ~p~n", [Raw]),
			case rfc4627:decode(Raw) of
				{ok, RequestObject, _}  ->
					%% 					 			io:format("~n==RequestObject === ~p~n", [RequestObject]),
					%% {
					%% 		"id":1330395827,
					%% 		"state":{"code":1, "msg":"操作成功"},
					%% 		"data":{
					%% 			"accountId":"U11626774a4e39c16cf7mmsnz5002une",
					%% 			"creator":"JY",
					%% 			"nickName":"九游玩家"
					%% 		}
					%% }
					case rfc4627:get_field(RequestObject, "state") of
						{ok, State} ->   %% 成功
							case rfc4627:get_field(State, "code", null) of 
								1 ->
									case rfc4627:get_field(RequestObject, "data") of
										{ok, Data} ->
											AccountId = rfc4627:get_field(Data, "accountId", []),
											NickName = rfc4627:get_field(Data, "nickName", []),
											{1, AccountId, NickName};
										Error ->
											%% 											io:format("~n==Error1 === ~p~n", [Error]),
											?ERROR_MSG("pp_account check_uc_sid get_field data Error:~p", [Error]),
											false
									end;
								10 ->  %% 请求参数错误
									{10, [], []};
								11 ->  %% 用户未登录
									{11, [], []}
							end;
						Error ->
							%% 							io:format("~n====Error2 === ~p~n", [Error]),
							?ERROR_MSG("pp_account check_uc_sid get_field state Error:~p", [Error]),
							false
					end;
				Error ->
					%% 					io:format("~n====Error3 === ~p~n", [Error]),
					?ERROR_MSG("pp_account check_uc_sid  decode error:~p", [Error]),
					false
			end;
		Error ->
			%% 			io:format("~n====Error4 === ~p~n", [Error]),
			?ERROR_MSG("pp_account check_uc_sid  httpc:request error:~p", [Error]),
			false
	end.


%% 验证登陆(棱镜平台)
check_lengj_login(ChannelData, Tiket, Token) ->
	%%ChannelData = ["d4fe030b6f9847dd80781f350bc44635", "123456789", "p1490", ""],
	%%Tiket = "lengj",
	%%Token = "bda553e9967c4f919e1923ea2c97b077",
	%%{_, GameId} = data_config:get_platform_gameid(Tiket),
	%%{_, ApiKey} = data_config:get_platform_key(Tiket),
	{_, VailUrl} = data_config:get_login_url(Tiket),
	
	[ChannelId, UserId, ProductCode, _ChannelLabel] = ChannelData,
	%%io:format("~n===_ChannelLabel:~p====~n", [_ChannelLabel]),
	%%Request = {Url, [{"userId", UserId}, {"channel", ChannelId}, {"token", Token}, {"productCode", ProductCode}]},
	Request = {lists:concat([VailUrl, "?userId=", UserId, "&channel=", ChannelId, "&token=", Token, "&productCode=", ProductCode]), []},
	HTTPOptions = [],
	Options = [],
	%% 	httpc:request(get, Request, HTTPOptions, Options).
	%%io:format("~n==httpc:Request === ~p~n", [Request]),
	case httpc:request(get, Request, HTTPOptions, Options) of
	%%case misc:get_http_content(Url) of
		{ok, {_Status, _Headers, Raw}} ->
			%%io:format("~n==Raw === ~p~n", [Raw]),
			case Raw of
				"true" ->
					true;
				_ ->
					false
			end;
		Error ->
			%%io:format("~n====Error4 === ~p~n", [Error]),
			?ERROR_MSG("pp_account check_lengj_login  httpc:request error:~p", [Error]),
			false
	end.


%% 测试UC充值回调接口
test_uc_pay(OrderId) ->
	ServerId = "1",
	PlayerId = "300010000003",
	
	Ver = "2.0",
	%%OrderId = "a12345",
	GameId = "552987",
	AccountId = "125838847",
	Creator = "UC",
	PayWay = 1, 
	Amount = "100",
	CallbackInfo = lists:concat(["serverId:",ServerId,";playerId:",PlayerId]),
	OrderStatus = "S",
	FailedDesc = "OK",
	%%CpOrderId = "1234567",
	
	ApiKey = "224ba93167a1e559cc1af30c66070ca6",
	
	Sign = util:md5(lists:concat(["accountId=", AccountId, "amount=", Amount, "callbackInfo=", CallbackInfo, "creator=",Creator, "failedDesc=", FailedDesc, "gameId=", GameId, "orderId=", 
								  OrderId,"orderStatus=", OrderStatus, "payWay=", PayWay, ApiKey])),
	
	Data = [{"orderId", OrderId}, {"gameId", GameId}, {"accountId", AccountId}, {"creator", Creator}, {"payWay", PayWay}, 
			{"amount", Amount}, {"orderStatus", OrderStatus},{"callbackInfo", CallbackInfo}, {"failedDesc",FailedDesc}],
	L = [{"ver", Ver}, {"data", Data}, {"sign", Sign}],
	Json = http_util2:convert_json(L),
	Url = "http://charge.szy.leygame.com/api/ucpay.php",
	Request = {Url, [], "application/json", Json},
	HTTPOptions = [],
	Options = [],
	httpc:request(post, Request, HTTPOptions, Options).


%% 验证时间是否过期
is_vail_time(Tick) ->
	Now = util:unixtime(),
	if Now > Tick + ?VAIL_TIME
		   orelse Now < Tick - ?VAIL_TIME->
		   false;
	   true ->
		   true
	end.

test_word() ->
	A = validate_name("绫乃酱"),
	B = validate_name("大傻Ｂ"),
	C = validate_name("将介石不给力啊有木有"),
	D = validate_name("A~~!!@@C"),
	E = validate_name("大傻A"),
	{A,B,C,D, E}.

test_word1() ->
	%% 	NameList = ["绫乃酱","大傻Ｂ","将介石不给力啊有木有","A~~!!@@C","!!花"],
	%%NameList = ?NAME,
	NameList = ["乔伊格雷西"],
	%% 	io:format("~ts", [NameList]),
	test_word1(NameList, []).

test_word1([H|T], _Arr) ->
	Ret = validate_name(H),
	case Ret of
		true -> test_word1(T, _Arr);
		{false, Res} ->		
			io:format("H=========:~p", [Res]),
			BName = list_to_binary(H),
			Bytes = <<BName/binary, <<" , ">>/binary>>,
			file:write_file("e:\\special_name.txt", Bytes, [append]),
			test_word1(T, _Arr)
	end;
test_word1([], _) ->
	ok.


%% 角色名合法性检测
validate_name(Name) ->
	case lib_words_ver:validate_name(Name, special) of
		true  -> 
			case lib_words_ver:validate_name(Name, [?NAME_LEN_MIN, ?NAME_LEN_MAX]) of %%长度检查
				true -> 
					case validate_name(Name, exist) of
						true  -> true;
						false -> {false, 3}
					end;
				false -> 
					{false, 5}                 
			end;
		false ->  
			{false, 4}  %%含非法字符(特殊或敏感词)
	end.

%%判断角色名是否已经存在
validate_name(Name, exist) ->
	case lib_player:is_exists_name(Name) of
		true ->
			false;    
		false ->
			true
	end.

%% 检查服务器编号
check_server_id(ServerId) ->
	ThisServerId = config:get_server_num(),
	if
%% 		ServerId =:= 998 -> %% 使用当前默认的服务器ID
%% 			{ok, 1};
		ServerId =:= ThisServerId ->
			{ok, ThisServerId};
		true ->
			%% 后续增加合服的服务器ID列表
			ServerIdList = lib_misc:get_combined_server_list(),
			case lists:member(ServerId, ServerIdList) of
				true ->
					{ok, ServerId};
				_ ->
					%% 					error
					{ok, ServerId}
			end
	end.

